const { sendMessageToChat, sendMessageToList } = require("../bot-api/tg-bot");
const tasks = require("../data/tasks");
const { listTasks } = require("../utils/utils");
const { log } = require("./admin");
const { completeTask, getTeamByUserId } = require("./team");

const sendResult = (id, n) => {
    const task = tasks[n].task.result;
    sendMessageToChat(
        id,
        `<b>–ó–∞—Ü–µ–ø–∫–∞ ‚Ññ${n + 1}:</b>\n\n` + task.text,
        {},
        { images: task.images }
    );
    if (task.after) {
        setTimeout(() => sendMessageToChat(id, task.after), 2000);
    }
};

const sendTasks = (id) => {
    const images = tasks.map((t) => t.task.image);
    sendMessageToChat(
        id,
        undefined,
        {},
        {
            images,
        }
    );
};

const checkAnswer = async (id, text) => {
    for (let i = 0; i < tasks.length; i++) {
        if (tasks[i].task.ans == text) {
            const team = await completeTask(id, i + 1);
            if (team) {
                sendMessageToList(
                    team.chats,
                    `<b>${i + 1} –∑–∞—Ü–µ–ø–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞!</b>\n\n${listTasks(
                        team.completed
                    )}`
                );
                sendResult(id, i);
                log(
                    `‚ùáÔ∏è<b>–ö–æ–º–∞–Ω–¥–∞ "${team.name}" —Ä–µ—à–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–µ ${
                        i + 1
                    }</b>\n\n${listTasks(team.completed)}`
                );

                if (team.completed.length == tasks.length) {
                    log(
                        `üî•<b>–ö–æ–º–∞–Ω–¥–∞ "${team.name}" –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ!</b>`
                    );
                    setTimeout(() => {
                        sendMessageToList(
                            team.chats,
                            "–î—É–º–∞—é, —è –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é."
                        );
                    }, 20000);
                    setTimeout(() => {
                        sendMessageToList(
                            team.chats,
                            undefined,
                            {},
                            {
                                audio: "CQACAgIAAxkBAAIFkmNkN5fRkBJqAUxMWCydYplbBlO-AAJoJgACo84hS0XfuJbEmu0WKgQ",
                            }
                        );
                    }, 21000);
                    setTimeout(() => {
                        sendMessageToList(
                            team.chats,
                            "–ß—ë—Ä—Ç, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª"
                        );
                    }, 46000);
                    setTimeout(() => {
                        sendMessageToList(
                            team.chats,
                            "–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–∑–Ω–∞—é—Ç –ø—Ä–∞–≤–¥—É... –Ø –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –î–æ–Ω–æ–º –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –æ–Ω –≤—Å—ë –Ω–µ —É–∑–Ω–∞–µ—Ç"
                        );
                    }, 47000);
                }
                return true;
            } else {
                sendMessageToChat(id, "<b>–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω</b>");
                return false;
            }
        }
    }
    const team = await getTeamByUserId(id);
    sendMessageToChat(id, "<b>–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ—Ç</b>");
    log(`<b>–ö–æ–º–∞–Ω–¥–∞ "${team.name}"</b>\n–ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞:<pre>${text}</pre>`);
};

module.exports = {
    sendTasks,
    checkAnswer,
};
